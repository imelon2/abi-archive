{"abi":[{"type":"function","name":"accountId","inputs":[],"outputs":[{"name":"accountImplementationId","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"execute","inputs":[{"name":"mode","type":"bytes32","internalType":"ModeCode"},{"name":"executionCalldata","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"executeFromExecutor","inputs":[{"name":"mode","type":"bytes32","internalType":"ModeCode"},{"name":"executionCalldata","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"returnData","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"payable"},{"type":"function","name":"executeUserOp","inputs":[{"name":"userOp","type":"tuple","internalType":"struct PackedUserOperation","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"callData","type":"bytes","internalType":"bytes"},{"name":"accountGasLimits","type":"bytes32","internalType":"bytes32"},{"name":"preVerificationGas","type":"uint256","internalType":"uint256"},{"name":"gasFees","type":"bytes32","internalType":"bytes32"},{"name":"paymasterAndData","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"}]},{"name":"userOpHash","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"initializeAccount","inputs":[{"name":"initData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"installModule","inputs":[{"name":"moduleTypeId","type":"uint256","internalType":"uint256"},{"name":"module","type":"address","internalType":"address"},{"name":"initData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"isModuleInstalled","inputs":[{"name":"moduleTypeId","type":"uint256","internalType":"uint256"},{"name":"module","type":"address","internalType":"address"},{"name":"additionalContext","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isValidSignature","inputs":[{"name":"hash","type":"bytes32","internalType":"bytes32"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes4","internalType":"bytes4"}],"stateMutability":"view"},{"type":"function","name":"supportsExecutionMode","inputs":[{"name":"encodedMode","type":"bytes32","internalType":"ModeCode"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"supportsModule","inputs":[{"name":"moduleTypeId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"uninstallModule","inputs":[{"name":"moduleTypeId","type":"uint256","internalType":"uint256"},{"name":"module","type":"address","internalType":"address"},{"name":"deInitData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"validateUserOp","inputs":[{"name":"userOp","type":"tuple","internalType":"struct PackedUserOperation","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"callData","type":"bytes","internalType":"bytes"},{"name":"accountGasLimits","type":"bytes32","internalType":"bytes32"},{"name":"preVerificationGas","type":"uint256","internalType":"uint256"},{"name":"gasFees","type":"bytes32","internalType":"bytes32"},{"name":"paymasterAndData","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"}]},{"name":"userOpHash","type":"bytes32","internalType":"bytes32"},{"name":"missingAccountFunds","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"validationData","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"event","name":"ModuleInstalled","inputs":[{"name":"moduleTypeId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"module","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ModuleUninstalled","inputs":[{"name":"moduleTypeId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"module","type":"address","indexed":false,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"accountId()":"9cfd7cff","execute(bytes32,bytes)":"e9ae5c53","executeFromExecutor(bytes32,bytes)":"d691c964","executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32)":"8dd7712f","initializeAccount(bytes)":"4b6a1419","installModule(uint256,address,bytes)":"9517e29f","isModuleInstalled(uint256,address,bytes)":"112d3a7d","isValidSignature(bytes32,bytes)":"1626ba7e","supportsExecutionMode(bytes32)":"d03c7914","supportsModule(uint256)":"f2dc691d","uninstallModule(uint256,address,bytes)":"a71763a8","validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":"19822f7c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleInstalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleUninstalled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"accountImplementationId\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ModeCode\",\"name\":\"mode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"executionCalldata\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ModeCode\",\"name\":\"mode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"executionCalldata\",\"type\":\"bytes\"}],\"name\":\"executeFromExecutor\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"}],\"name\":\"executeUserOp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"initializeAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"installModule\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalContext\",\"type\":\"bytes\"}],\"name\":\"isModuleInstalled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ModeCode\",\"name\":\"encodedMode\",\"type\":\"bytes32\"}],\"name\":\"supportsExecutionMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"}],\"name\":\"supportsModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"deInitData\",\"type\":\"bytes\"}],\"name\":\"uninstallModule\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@livingrockrises | Biconomy | chirag@biconomy.io@aboudjem | Biconomy | adam.boudjemaa@biconomy.io@filmakarov | Biconomy | filipp.makarov@biconomy.io@zeroknots | Rhinestone.wtf | zeroknots.eth Special thanks to the Solady team for foundational contributions: https://github.com/Vectorized/solady\",\"details\":\"Consolidates ERC-4337 user operations and ERC-7579 configurations into a unified interface for smart account management. It extends both IERC4337Account and IERC7579Account, enhancing modular capabilities and supporting advanced contract architectures. Includes error definitions for robust handling of common issues such as unsupported module types and execution failures. The initialize function sets up the account with validators and configurations, ensuring readiness for use.\",\"kind\":\"dev\",\"methods\":{\"accountId()\":{\"details\":\"Returns the account id of the smart account\",\"returns\":{\"accountImplementationId\":\"the account id of the smart account the accountId should be structured like so:        \\\"vendorname.accountname.semver\\\"\"}},\"execute(bytes32,bytes)\":{\"details\":\"Executes a transaction on behalf of the account.         This function is intended to be called by ERC-4337 EntryPoint.solEnsure adequate authorization control: i.e. onlyEntryPointOrSelfMSA MUST implement this function signature. If a mode is requested that is not supported by the Account, it MUST revert\",\"params\":{\"executionCalldata\":\"The encoded execution call data\",\"mode\":\"The encoded execution mode of the transaction. See ModeLib.sol for details\"}},\"executeFromExecutor(bytes32,bytes)\":{\"details\":\"Executes a transaction on behalf of the account.         This function is intended to be called by Executor ModulesEnsure adequate authorization control: i.e. onlyExecutorModuleMSA MUST implement this function signature. If a mode is requested that is not supported by the Account, it MUST revert\",\"params\":{\"executionCalldata\":\"The encoded execution call data\",\"mode\":\"The encoded execution mode of the transaction. See ModeLib.sol for details\"}},\"executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32)\":{\"params\":{\"userOp\":\"- The operation that was just validated.\",\"userOpHash\":\"- Hash of the user's request data.\"}},\"initializeAccount(bytes)\":{\"details\":\"This method sets up the account for operation, linking it with a validator and initializing it with specific data. Can be called directly or via a factory.\",\"params\":{\"initData\":\"Encoded data used for the account's configuration during initialization.\"}},\"installModule(uint256,address,bytes)\":{\"details\":\"installs a Module of a certain type on the smart accountImplement Authorization control of your chosing\",\"params\":{\"initData\":\"arbitrary data that may be required on the module during `onInstall` initialization.\",\"module\":\"the module address\",\"moduleTypeId\":\"the module type ID according the ERC-7579 spec\"}},\"isModuleInstalled(uint256,address,bytes)\":{\"params\":{\"additionalContext\":\"additional context data that the smart account may interpret to                          identifiy conditions under which the module is installed.                          usually this is not necessary, but for some special hooks that                          are stored in mappings, this param might be needed\",\"module\":\"the module address\",\"moduleTypeId\":\"the module type ID according the ERC-7579 spec      Note: keep in mind that some contracts can be multiple module types at the same time. It            thus may be necessary to query multiple module types\"}},\"isValidSignature(bytes32,bytes)\":{\"details\":\"ERC-1271 isValidSignature         This function is intended to be used to validate a smart account signature and may forward the call to a validator module\",\"params\":{\"data\":\"The data that is signed\",\"hash\":\"The hash of the data that is signed\"}},\"supportsExecutionMode(bytes32)\":{\"params\":{\"encodedMode\":\"the encoded mode\"}},\"supportsModule(uint256)\":{\"params\":{\"moduleTypeId\":\"the module type ID according the ERC-7579 spec\"}},\"uninstallModule(uint256,address,bytes)\":{\"details\":\"uninstalls a Module of a certain type on the smart accountImplement Authorization control of your chosing\",\"params\":{\"deInitData\":\"arbitrary data that may be required on the module during `onUninstall` de-initialization.\",\"module\":\"the module address\",\"moduleTypeId\":\"the module type ID according the ERC-7579 spec\"}},\"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)\":{\"details\":\"Must validate caller is the entryPoint.      Must validate the signature and nonce\",\"params\":{\"missingAccountFunds\":\"- Missing funds on the account's deposit in the entrypoint.                              This is the minimum amount to transfer to the sender(entryPoint) to be                              able to make the call. The excess is left as a deposit in the entrypoint                              for future calls. Can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\".                              In case there is a paymaster in the request (or the current deposit is high                              enough), this value will be zero.\",\"userOp\":\"- The operation that is about to be executed.\",\"userOpHash\":\"- Hash of the user's request data. can be used as the basis for signature.\"},\"returns\":{\"validationData\":\"      - Packaged ValidationData structure. use `_packValidationData` and                              `_unpackValidationData` to encode and decode.                              <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,                                 otherwise, an address of an \\\"authorizer\\\" contract.                              <6-byte> validUntil - Last timestamp this operation is valid. 0 for \\\"indefinite\\\"                              <6-byte> validAfter - First timestamp this operation is valid                                                    If an account doesn't use time-range, it is enough to                                                    return SIG_VALIDATION_FAILED value (1) for signature failure.                              Note that the validation code cannot use block.timestamp (or block.number) directly.\"}}},\"title\":\"Nexus - INexus Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32)\":{\"notice\":\"Account may implement this execute method. passing this methodSig at the beginning of callData will cause the entryPoint to pass the full UserOp (and hash) to the account. The account should skip the methodSig, and use the callData (and optionally, other UserOp fields)\"},\"initializeAccount(bytes)\":{\"notice\":\"Initializes the smart account with a validator and custom data.\"},\"isModuleInstalled(uint256,address,bytes)\":{\"notice\":\"Function to check if the account has a certain module installed\"},\"supportsExecutionMode(bytes32)\":{\"notice\":\"Function to check if the account supports a certain CallType or ExecType (see ModeLib.sol)\"},\"supportsModule(uint256)\":{\"notice\":\"Function to check if the account supports installation of a certain module type Id\"},\"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \\\"simulation call\\\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\"}},\"notice\":\"Integrates ERC-4337 and ERC-7579 standards to manage smart accounts within the Nexus suite.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@rhinestone/modulekit/src/accounts/nexus/interfaces/INexus.sol\":\"INexus\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ERC4337/=node_modules/@ERC4337/\",\":@gnosis.pm/=node_modules/@gnosis.pm/\",\":@matterlabs/zksync-contracts/l2/contracts/=src/libraries/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@prb/math/=node_modules/@prb/math/src/\",\":@rhinestone/=node_modules/@rhinestone/\",\":@safe-global/=node_modules/@safe-global/\",\":@zk-email/contracts/=node_modules/@zk-email/contracts/\",\":@zk-email/ether-email-auth-contracts/=node_modules/@zk-email/ether-email-auth-contracts/\",\":ExcessivelySafeCall/=node_modules/excessively-safe-call/src/\",\":account-abstraction-v0.6/=node_modules/@ERC4337/account-abstraction-v0.6/contracts/\",\":account-abstraction/=node_modules/@ERC4337/account-abstraction/contracts/\",\":ds-test/=node_modules/ds-test/src/\",\":erc4337-validation/=node_modules/@rhinestone/erc4337-validation/src/\",\":erc7579/interfaces/=node_modules/@rhinestone/modulekit/src/accounts/common/interfaces/\",\":excessively-safe-call/=node_modules/excessively-safe-call/\",\":forge-std/=node_modules/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":kernel/=node_modules/@zerodev/kernel/src/\",\":module-bases/=node_modules/@rhinestone/module-bases/src/\",\":modulekit/=node_modules/@rhinestone/modulekit/src/\",\":safe7579/=node_modules/@rhinestone/safe7579/src/\",\":sentinellist/=node_modules/@rhinestone/sentinellist/src/\",\":solady/=node_modules/solady/src/\",\":solarray/=node_modules/solarray/src/\",\":solidity-stringutils/=node_modules/solidity-stringutils/\"]},\"sources\":{\"node_modules/@ERC4337/account-abstraction/contracts/core/Helpers.sol\":{\"keccak256\":\"0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://ca829a69b3fbc74fec8e140d42a2bf93bc3512609272f031c846470f61f0ab7e\",\"dweb:/ipfs/QmP3r3MBgAN39KeVB1rCGJWwcBcotNt26ALtAR54poQ1Jc\"]},\"node_modules/@ERC4337/account-abstraction/contracts/core/UserOperationLib.sol\":{\"keccak256\":\"0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b1d11cc364c8bf7ed5388268c895b5ffed16e87dfbcb320ddeeba5e7974315dc\",\"dweb:/ipfs/QmYSpvjxEjweietQrYZagwQ52ipy7eXx4rwvnTzXKeGeMS\"]},\"node_modules/@ERC4337/account-abstraction/contracts/interfaces/PackedUserOperation.sol\":{\"keccak256\":\"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://499a948aba60480dba6e25c763b8d918f1c246eb7a3302e04f493e080f3295be\",\"dweb:/ipfs/QmeRhhswf4NACcBKam2PyjpTP2ddSm648kah5kkQJsvwz3\"]},\"node_modules/@rhinestone/modulekit/src/accounts/common/interfaces/IERC4337Account.sol\":{\"keccak256\":\"0xb0f28b12677fd3b3587b785812b061d283d914f142ef2923f38366c3436ade31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e919dc1b1dd6c71435f03844e761cdc9ae1eb70a357dce7d85423e255edce12\",\"dweb:/ipfs/QmY3RUjonmfsJsYKZxxZXQ2LbwS32eD65AtvBoBvpGC89j\"]},\"node_modules/@rhinestone/modulekit/src/accounts/common/interfaces/IERC7579Account.sol\":{\"keccak256\":\"0xdfa4eea2e7d608e6b3681d8caebb92c29fbcc9a09e1cec0ac45db52a77d7bea9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://82cf46f8346867884d531139cffbbc62929e56e7a5e38bc7377dbe1566300417\",\"dweb:/ipfs/QmZSr9gaDe3sns3ai6ikr58ZYaBuhcdpzUZ2DWvDWhXYaJ\"]},\"node_modules/@rhinestone/modulekit/src/accounts/common/lib/ModeLib.sol\":{\"keccak256\":\"0x11b48cd992efe381edabe7fd70b8e9dc61e4eae683c696c44f37b625582d712a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://5ba56d9bdba0f616da1728ceb19e4f34a3c085f46bfae413e297ab664d9a46e9\",\"dweb:/ipfs/QmbSXxis2vsCHupcBHv6hj5YHcqdQcrcmT73fNSqxrmGmN\"]},\"node_modules/@rhinestone/modulekit/src/accounts/nexus/interfaces/INexus.sol\":{\"keccak256\":\"0x95069d94248346d611446a6ea1fb4cace78749878bb902250824866ccdf38bd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7ea3986f2e693b3a32942666ff46b864b60368540339de15afc9d0d476f52217\",\"dweb:/ipfs/QmRsiZjoK3EDQVzAdre4CBwMohsCWwMucw5hVDHZMjoJPe\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256","indexed":false},{"internalType":"address","name":"module","type":"address","indexed":false}],"type":"event","name":"ModuleInstalled","anonymous":false},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256","indexed":false},{"internalType":"address","name":"module","type":"address","indexed":false}],"type":"event","name":"ModuleUninstalled","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"accountId","outputs":[{"internalType":"string","name":"accountImplementationId","type":"string"}]},{"inputs":[{"internalType":"ModeCode","name":"mode","type":"bytes32"},{"internalType":"bytes","name":"executionCalldata","type":"bytes"}],"stateMutability":"payable","type":"function","name":"execute"},{"inputs":[{"internalType":"ModeCode","name":"mode","type":"bytes32"},{"internalType":"bytes","name":"executionCalldata","type":"bytes"}],"stateMutability":"payable","type":"function","name":"executeFromExecutor","outputs":[{"internalType":"bytes[]","name":"returnData","type":"bytes[]"}]},{"inputs":[{"internalType":"struct PackedUserOperation","name":"userOp","type":"tuple","components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bytes32","name":"accountGasLimits","type":"bytes32"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"bytes32","name":"gasFees","type":"bytes32"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}]},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"executeUserOp"},{"inputs":[{"internalType":"bytes","name":"initData","type":"bytes"}],"stateMutability":"payable","type":"function","name":"initializeAccount"},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256"},{"internalType":"address","name":"module","type":"address"},{"internalType":"bytes","name":"initData","type":"bytes"}],"stateMutability":"payable","type":"function","name":"installModule"},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256"},{"internalType":"address","name":"module","type":"address"},{"internalType":"bytes","name":"additionalContext","type":"bytes"}],"stateMutability":"view","type":"function","name":"isModuleInstalled","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}]},{"inputs":[{"internalType":"ModeCode","name":"encodedMode","type":"bytes32"}],"stateMutability":"view","type":"function","name":"supportsExecutionMode","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256"}],"stateMutability":"view","type":"function","name":"supportsModule","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256"},{"internalType":"address","name":"module","type":"address"},{"internalType":"bytes","name":"deInitData","type":"bytes"}],"stateMutability":"payable","type":"function","name":"uninstallModule"},{"inputs":[{"internalType":"struct PackedUserOperation","name":"userOp","type":"tuple","components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bytes32","name":"accountGasLimits","type":"bytes32"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"bytes32","name":"gasFees","type":"bytes32"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}]},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"missingAccountFunds","type":"uint256"}],"stateMutability":"payable","type":"function","name":"validateUserOp","outputs":[{"internalType":"uint256","name":"validationData","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"accountId()":{"details":"Returns the account id of the smart account","returns":{"accountImplementationId":"the account id of the smart account the accountId should be structured like so:        \"vendorname.accountname.semver\""}},"execute(bytes32,bytes)":{"details":"Executes a transaction on behalf of the account.         This function is intended to be called by ERC-4337 EntryPoint.solEnsure adequate authorization control: i.e. onlyEntryPointOrSelfMSA MUST implement this function signature. If a mode is requested that is not supported by the Account, it MUST revert","params":{"executionCalldata":"The encoded execution call data","mode":"The encoded execution mode of the transaction. See ModeLib.sol for details"}},"executeFromExecutor(bytes32,bytes)":{"details":"Executes a transaction on behalf of the account.         This function is intended to be called by Executor ModulesEnsure adequate authorization control: i.e. onlyExecutorModuleMSA MUST implement this function signature. If a mode is requested that is not supported by the Account, it MUST revert","params":{"executionCalldata":"The encoded execution call data","mode":"The encoded execution mode of the transaction. See ModeLib.sol for details"}},"executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32)":{"params":{"userOp":"- The operation that was just validated.","userOpHash":"- Hash of the user's request data."}},"initializeAccount(bytes)":{"details":"This method sets up the account for operation, linking it with a validator and initializing it with specific data. Can be called directly or via a factory.","params":{"initData":"Encoded data used for the account's configuration during initialization."}},"installModule(uint256,address,bytes)":{"details":"installs a Module of a certain type on the smart accountImplement Authorization control of your chosing","params":{"initData":"arbitrary data that may be required on the module during `onInstall` initialization.","module":"the module address","moduleTypeId":"the module type ID according the ERC-7579 spec"}},"isModuleInstalled(uint256,address,bytes)":{"params":{"additionalContext":"additional context data that the smart account may interpret to                          identifiy conditions under which the module is installed.                          usually this is not necessary, but for some special hooks that                          are stored in mappings, this param might be needed","module":"the module address","moduleTypeId":"the module type ID according the ERC-7579 spec      Note: keep in mind that some contracts can be multiple module types at the same time. It            thus may be necessary to query multiple module types"}},"isValidSignature(bytes32,bytes)":{"details":"ERC-1271 isValidSignature         This function is intended to be used to validate a smart account signature and may forward the call to a validator module","params":{"data":"The data that is signed","hash":"The hash of the data that is signed"}},"supportsExecutionMode(bytes32)":{"params":{"encodedMode":"the encoded mode"}},"supportsModule(uint256)":{"params":{"moduleTypeId":"the module type ID according the ERC-7579 spec"}},"uninstallModule(uint256,address,bytes)":{"details":"uninstalls a Module of a certain type on the smart accountImplement Authorization control of your chosing","params":{"deInitData":"arbitrary data that may be required on the module during `onUninstall` de-initialization.","module":"the module address","moduleTypeId":"the module type ID according the ERC-7579 spec"}},"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":{"details":"Must validate caller is the entryPoint.      Must validate the signature and nonce","params":{"missingAccountFunds":"- Missing funds on the account's deposit in the entrypoint.                              This is the minimum amount to transfer to the sender(entryPoint) to be                              able to make the call. The excess is left as a deposit in the entrypoint                              for future calls. Can be withdrawn anytime using \"entryPoint.withdrawTo()\".                              In case there is a paymaster in the request (or the current deposit is high                              enough), this value will be zero.","userOp":"- The operation that is about to be executed.","userOpHash":"- Hash of the user's request data. can be used as the basis for signature."},"returns":{"validationData":"      - Packaged ValidationData structure. use `_packValidationData` and                              `_unpackValidationData` to encode and decode.                              <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,                                 otherwise, an address of an \"authorizer\" contract.                              <6-byte> validUntil - Last timestamp this operation is valid. 0 for \"indefinite\"                              <6-byte> validAfter - First timestamp this operation is valid                                                    If an account doesn't use time-range, it is enough to                                                    return SIG_VALIDATION_FAILED value (1) for signature failure.                              Note that the validation code cannot use block.timestamp (or block.number) directly."}}},"version":1},"userdoc":{"kind":"user","methods":{"executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32)":{"notice":"Account may implement this execute method. passing this methodSig at the beginning of callData will cause the entryPoint to pass the full UserOp (and hash) to the account. The account should skip the methodSig, and use the callData (and optionally, other UserOp fields)"},"initializeAccount(bytes)":{"notice":"Initializes the smart account with a validator and custom data."},"isModuleInstalled(uint256,address,bytes)":{"notice":"Function to check if the account has a certain module installed"},"supportsExecutionMode(bytes32)":{"notice":"Function to check if the account supports a certain CallType or ExecType (see ModeLib.sol)"},"supportsModule(uint256)":{"notice":"Function to check if the account supports installation of a certain module type Id"},"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":{"notice":"Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \"simulation call\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure."}},"version":1}},"settings":{"remappings":["@ERC4337/=node_modules/@ERC4337/","@gnosis.pm/=node_modules/@gnosis.pm/","@matterlabs/zksync-contracts/l2/contracts/=src/libraries/","@openzeppelin/=node_modules/@openzeppelin/","@prb/math/=node_modules/@prb/math/src/","@rhinestone/=node_modules/@rhinestone/","@safe-global/=node_modules/@safe-global/","@zk-email/contracts/=node_modules/@zk-email/contracts/","@zk-email/ether-email-auth-contracts/=node_modules/@zk-email/ether-email-auth-contracts/","ExcessivelySafeCall/=node_modules/excessively-safe-call/src/","account-abstraction-v0.6/=node_modules/@ERC4337/account-abstraction-v0.6/contracts/","account-abstraction/=node_modules/@ERC4337/account-abstraction/contracts/","ds-test/=node_modules/ds-test/src/","erc4337-validation/=node_modules/@rhinestone/erc4337-validation/src/","erc7579/interfaces/=node_modules/@rhinestone/modulekit/src/accounts/common/interfaces/","excessively-safe-call/=node_modules/excessively-safe-call/","forge-std/=node_modules/forge-std/src/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/","kernel/=node_modules/@zerodev/kernel/src/","module-bases/=node_modules/@rhinestone/module-bases/src/","modulekit/=node_modules/@rhinestone/modulekit/src/","safe7579/=node_modules/@rhinestone/safe7579/src/","sentinellist/=node_modules/@rhinestone/sentinellist/src/","solady/=node_modules/solady/src/","solarray/=node_modules/solarray/src/","solidity-stringutils/=node_modules/solidity-stringutils/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"node_modules/@rhinestone/modulekit/src/accounts/nexus/interfaces/INexus.sol":"INexus"},"evmVersion":"cancun","libraries":{}},"sources":{"node_modules/@ERC4337/account-abstraction/contracts/core/Helpers.sol":{"keccak256":"0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6","urls":["bzz-raw://ca829a69b3fbc74fec8e140d42a2bf93bc3512609272f031c846470f61f0ab7e","dweb:/ipfs/QmP3r3MBgAN39KeVB1rCGJWwcBcotNt26ALtAR54poQ1Jc"],"license":"GPL-3.0"},"node_modules/@ERC4337/account-abstraction/contracts/core/UserOperationLib.sol":{"keccak256":"0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b","urls":["bzz-raw://b1d11cc364c8bf7ed5388268c895b5ffed16e87dfbcb320ddeeba5e7974315dc","dweb:/ipfs/QmYSpvjxEjweietQrYZagwQ52ipy7eXx4rwvnTzXKeGeMS"],"license":"GPL-3.0"},"node_modules/@ERC4337/account-abstraction/contracts/interfaces/PackedUserOperation.sol":{"keccak256":"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359","urls":["bzz-raw://499a948aba60480dba6e25c763b8d918f1c246eb7a3302e04f493e080f3295be","dweb:/ipfs/QmeRhhswf4NACcBKam2PyjpTP2ddSm648kah5kkQJsvwz3"],"license":"GPL-3.0"},"node_modules/@rhinestone/modulekit/src/accounts/common/interfaces/IERC4337Account.sol":{"keccak256":"0xb0f28b12677fd3b3587b785812b061d283d914f142ef2923f38366c3436ade31","urls":["bzz-raw://4e919dc1b1dd6c71435f03844e761cdc9ae1eb70a357dce7d85423e255edce12","dweb:/ipfs/QmY3RUjonmfsJsYKZxxZXQ2LbwS32eD65AtvBoBvpGC89j"],"license":"MIT"},"node_modules/@rhinestone/modulekit/src/accounts/common/interfaces/IERC7579Account.sol":{"keccak256":"0xdfa4eea2e7d608e6b3681d8caebb92c29fbcc9a09e1cec0ac45db52a77d7bea9","urls":["bzz-raw://82cf46f8346867884d531139cffbbc62929e56e7a5e38bc7377dbe1566300417","dweb:/ipfs/QmZSr9gaDe3sns3ai6ikr58ZYaBuhcdpzUZ2DWvDWhXYaJ"],"license":"MIT"},"node_modules/@rhinestone/modulekit/src/accounts/common/lib/ModeLib.sol":{"keccak256":"0x11b48cd992efe381edabe7fd70b8e9dc61e4eae683c696c44f37b625582d712a","urls":["bzz-raw://5ba56d9bdba0f616da1728ceb19e4f34a3c085f46bfae413e297ab664d9a46e9","dweb:/ipfs/QmbSXxis2vsCHupcBHv6hj5YHcqdQcrcmT73fNSqxrmGmN"],"license":"GPL-3.0"},"node_modules/@rhinestone/modulekit/src/accounts/nexus/interfaces/INexus.sol":{"keccak256":"0x95069d94248346d611446a6ea1fb4cace78749878bb902250824866ccdf38bd0","urls":["bzz-raw://7ea3986f2e693b3a32942666ff46b864b60368540339de15afc9d0d476f52217","dweb:/ipfs/QmRsiZjoK3EDQVzAdre4CBwMohsCWwMucw5hVDHZMjoJPe"],"license":"MIT"}},"version":1},"id":122}